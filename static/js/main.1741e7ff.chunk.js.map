{"version":3,"sources":["Grid.js","ImageRadio.js","structures/structures.js","structures/StructureMenu.js","App.js","index.js"],"names":["Grid","props","handleMouseEnter","id","setState","shadowLocation","state","gridTable","this","grid","gridCopy","map","arr","slice","shadowGrid","cellId","split","x","parseInt","y","i","length","j","row","r","key","val","c","interactive","cellSize","boxId","populated","cellColor","cellClickFunc","onMouseEnter","className","React","Component","Cell","cellStyle","backgroundColor","undefined","height","width","style","onClick","ImageRadio","handleClick","onChange","value","content","label","classes","large","medium","small","imgSrc","src","alt","altText","solidColor","type","checked","name","structures","StructureMenu","selectItem","selected","detailsOpen","selectedGrid","data","generation","nextGen","stepFunc","period","componentDidMount","forEach","s","unshift","push","emptyRow","Array","fill","structure","selectItemFunc","Modal","closeIcon","onClose","closeFunc","open","Header","Content","dimensions","Button","icon","labelPosition","placeStructFunc","Icon","Popup","disabled","trigger","StructureItem","toggleHover","hover","play","timer","setInterval","gridSize","onMouseLeave","App","toggleAutoPlay","playing","clearInterval","interval","openSettingsModal","structureModalOpen","closeSettingsModal","openStructureMenu","structureMenuOpen","closeStructureMenu","handleIntervalSliderChange","handleColorChange","color","newGrid","step","neighours","nLiveNeighbours","cellIsPopulated","g","count","startPlaceStructure","selectedStructGrid","resetGrid","rows","cols","randomSeedGrid","Math","floor","random","onCellClick","confirmPlaceStructure","toggleCell","colorOptions","hex","onMouseMove","updateCursorXY","primary","discrete","settings","start","min","max","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4ZAYMA,G,yDACJ,WAAYC,GAAO,IAAD,8BAChB,cAAMA,IAQRC,iBAAmB,SAACC,GAClB,EAAKC,SAAS,CAAEC,eAAgBF,KARhC,EAAKG,MAAQ,CAEXD,eAAgB,OAJF,E,qDAaR,IAAD,OAEHE,EAAY,KAGhB,GAAIC,KAAKP,MAAMQ,KAAK,CAClB,IAAIC,EAAWF,KAAKP,MAAMQ,KAAKE,KAAI,SAASC,GAAO,OAAOA,EAAIC,WAG9D,GAAIL,KAAKP,MAAMa,WAKb,IAJA,IAAIC,EAAUP,KAAKF,MAAMD,eAAeQ,QAASG,MAAM,KACnDC,EAAIC,SAASH,EAAO,IACpBI,EAAID,SAASH,EAAO,IAEfK,EAAI,EAAGA,EAAIZ,KAAKP,MAAMa,WAAWO,OAAQD,IAChD,IAAK,IAAIE,EAAI,EAAGA,EAAId,KAAKP,MAAMa,WAAW,GAAGO,OAAQC,IAC/CL,EAAIG,EAAIZ,KAAKP,MAAMQ,KAAKY,QAAUF,EAAIG,EAAId,KAAKP,MAAMQ,KAAK,GAAGY,SAC/DX,EAASO,EAAIG,GAAGD,EAAIG,GAAKd,KAAKP,MAAMa,WAAWM,GAAGE,IAO1Df,EAAYG,EAASC,KAAI,SAACY,EAAKC,GAC7B,OAAO,wBAAIC,IAAKD,GAEZD,EAAIZ,KAAI,SAACe,EAAKC,GACZ,OAAO,kBAAC,EAAD,CACLC,YAAa,EAAK3B,MAAM2B,YACxBC,SAAU,EAAK5B,MAAM4B,SACrBC,MAAON,EAAI,IAAMG,EACjBF,IAAKD,EAAI,IAAMG,EACfI,UAAWL,EACXM,UAAW,EAAK/B,MAAM+B,UACtBC,cAAe,EAAKhC,MAAMgC,cAC1BC,aAAc,EAAKhC,0BAQ/B,OACE,2BAAOiC,UAAU,QACf,+BACI5B,Q,GA7DO6B,IAAMC,YA8EnBC,E,uKAEM,IAAD,OACHC,EAAY,CACdC,gBAAiBhC,KAAKP,MAAM8B,UAAYvB,KAAKP,MAAM+B,eAAYS,EAC/DC,OAAQlC,KAAKP,MAAM4B,SAAWrB,KAAKP,MAAM4B,SAAW,OACpDc,MAAOnC,KAAKP,MAAM4B,SAAWrB,KAAKP,MAAM4B,SAAW,QAGrD,OACE,wBACEe,MAAOL,EACPJ,UAAW3B,KAAKP,MAAM2B,YAAc,mBAAqB,OACzDiB,QAASrC,KAAKP,MAAM2B,YAAc,WAAO,EAAK3B,MAAMgC,cAAc,EAAKhC,MAAM6B,QAAU,KACvFI,aAAc,kBAAM,EAAKjC,MAAMiC,aAAa,EAAKjC,MAAM6B,c,GAd5CM,IAAMC,WAoBVrC,ICzDA8C,G,mNApCbC,YAAc,WACR,EAAK9C,MAAM+C,SAAU,EAAK/C,MAAM+C,SAAS,EAAK/C,MAAMgD,OAC/C,EAAKhD,MAAM4C,SAAS,EAAK5C,MAAM4C,QAAQ,EAAK5C,MAAMgD,Q,uDAK3D,IAKIC,EAIAC,EATAC,EAAU,aAWd,OAVI5C,KAAKP,MAAMoD,MAAOD,GAAW,SACxB5C,KAAKP,MAAMqD,OAAQF,GAAW,UAC9B5C,KAAKP,MAAMsD,QAAOH,GAAW,UAGlC5C,KAAKP,MAAMuD,OAAQN,EAAU,yBAAKf,UAAU,oBAAoBsB,IAAKjD,KAAKP,MAAMuD,OAAQE,IAAKlD,KAAKP,MAAM0D,UACnGnD,KAAKP,MAAM2D,aAAYV,EAAU,yBAAKf,UAAU,oBAAoBS,MAAO,CAACJ,gBAAiBhC,KAAKP,MAAM2D,eAG7GpD,KAAKP,MAAMkD,QAAOA,EAAM,2BAAI3C,KAAKP,MAAMkD,QAEzC,yBAAKhB,UAAU,qBACb,2BACE0B,KAAK,QACLC,QAAStD,KAAKP,MAAM6D,QACpBC,KAAMvD,KAAKP,MAAM8D,KACjBd,MAAOzC,KAAKP,MAAMgD,MAClBJ,QAASrC,KAAKuC,cAEhB,yBAAKZ,UAAWiB,GACbF,EACAC,Q,GA/Bcf,IAAMC,Y,SCblB2B,G,OAAa,CACxB,CACE,KAAQ,UACR,WAAc,CAAC,EAAG,GAClB,KAAQ,aACR,OAAU,EACV,KAAQ,CACN,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,KAGX,CACE,KAAQ,OACR,WAAc,CAAC,EAAG,GAClB,KAAQ,aACR,OAAU,EACV,KAAQ,CACN,CAAC,EAAG,EAAG,EAAG,GACV,CAAC,EAAG,EAAG,EAAG,GACV,CAAC,EAAG,EAAG,EAAG,GACV,CAAC,EAAG,EAAG,EAAG,KAGd,CACE,KAAQ,SACR,WAAc,CAAC,EAAG,GAClB,KAAQ,aACR,OAAU,EACV,KAAQ,CACN,CAAC,EAAG,EAAG,EAAG,GACV,CAAC,EAAG,EAAG,EAAG,GACV,CAAC,EAAG,EAAG,EAAG,GACV,CAAC,EAAG,EAAG,EAAG,KAGd,CACE,KAAQ,SACR,WAAc,CAAC,GAAI,IACnB,KAAQ,aACR,OAAU,EACV,KAAQ,CACN,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAC3C,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAC3C,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAC3C,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAC3C,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAC3C,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAC3C,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAC3C,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAC3C,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAC3C,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAC3C,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAC3C,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAC3C,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAC3C,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAC3C,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,KAG/C,CACE,KAAQ,iBACR,WAAc,CAAC,EAAG,IAClB,KAAQ,aACR,OAAU,GACV,KAAQ,CACN,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACzB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACzB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACzB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACzB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACzB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACzB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACzB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACzB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACzB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACzB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACzB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACzB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACzB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACzB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACzB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,KAG7B,CACE,KAAQ,SACR,WAAc,CAAC,EAAG,GAClB,KAAQ,YACR,KAAQ,CACN,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,KAGX,CACE,KAAQ,mBACR,WAAc,CAAC,EAAG,GAClB,KAAQ,YACR,KAAQ,CACN,CAAC,EAAG,EAAG,EAAG,EAAG,GACb,CAAC,EAAG,EAAG,EAAG,EAAG,GACb,CAAC,EAAG,EAAG,EAAG,EAAG,GACb,CAAC,EAAG,EAAG,EAAG,EAAG,OCzFbC,E,kDACJ,WAAYhE,GAAQ,IAAD,8BACjB,cAAMA,IAWRiE,WAAa,SAAC9C,GACZ,EAAKhB,SAAS,CACZ+D,SAAU/C,EACVgD,aAAa,EACbC,aAAcC,EAAKlD,GAAGX,KACtB8D,WAAY,KAjBG,EAsBnBC,QAAU,WACR,EAAKpE,SAAS,CACZiE,aAAc,EAAKpE,MAAMwE,SAAS,EAAKnE,MAAM+D,cAC7CE,YAAa,EAAKjE,MAAMiE,WAAa,GAAKD,EAAK,EAAKhE,MAAM6D,UAAUO,UAzBrD,EA6BnBC,kBAAoB,WAGlBL,EAAKM,SAAQ,SAAAC,GACXA,EAAEpE,KAAKmE,SAAQ,SAAArD,GACbA,EAAIuD,SAAQ,GACZvD,EAAIwD,MAAK,MAGX,IAAIC,EAAW,IAAIC,MAAMJ,EAAEpE,KAAK,GAAGY,QAAQ6D,MAAK,GAChDL,EAAEpE,KAAKqE,QAAQE,GACfH,EAAEpE,KAAKsE,KAAKC,OArCd,EAAK1E,MAAQ,CACX6D,SAAU,EACVC,aAAa,EACbC,aAAcC,EAAK,GAAG7D,KACtB8D,WAAY,GAPG,E,qDA4CT,IAAD,OAEHP,EAAaM,EAAK3D,KAAI,SAACkE,EAAGzD,GAC5B,OAAO,kBAAC,EAAD,CACLK,IAAKL,EACLA,EAAGA,EACH+D,UAAWN,EACXJ,SAAU,EAAKxE,MAAMwE,SACrBW,eAAgB,EAAKlB,gBAIzB,OACE,kBAACmB,EAAA,EAAD,CACEC,WAAS,EACTC,QAAS/E,KAAKP,MAAMuF,UACpBC,KAAMjF,KAAKP,MAAMwF,MAEjB,kBAACJ,EAAA,EAAMK,OAAP,mBACA,kBAACL,EAAA,EAAMM,QAAP,KACE,yBAAKxF,GAAG,iBAEN,yBAAKA,GAAG,iBAAiBgC,UAAY3B,KAAKF,MAAM8D,YAA0B,KAAZ,WAC3DJ,GAIH,yBAAK7D,GAAG,oBAAoBgC,UAAW3B,KAAKF,MAAM8D,YAAc,UAAY,MAC1E,6BACE,4BAAKE,EAAK9D,KAAKF,MAAM6D,UAAUJ,MAC/B,0CAAgBO,EAAK9D,KAAKF,MAAM6D,UAAUyB,WAAW,GAArD,IAA0DtB,EAAK9D,KAAKF,MAAM6D,UAAUyB,WAAW,IAC/F,sCAAYtB,EAAK9D,KAAKF,MAAM6D,UAAUO,QACtC,oCAAUJ,EAAK9D,KAAKF,MAAM6D,UAAUN,MACpC,kBAACgC,EAAA,EAAD,CAAQC,MAAI,EAACC,cAAc,OAAOlD,QAAS,kBAAM,EAAK5C,MAAM+F,gBAAgB,EAAK1F,MAAM+D,gBAAvF,wBAEE,kBAAC4B,EAAA,EAAD,CAAMlC,KAAK,iBAEb,kBAAC8B,EAAA,EAAD,CAAQ1D,UAAU,cAAcU,QAAS,kBAAM,EAAKzC,SAAS,CAAEgE,aAAa,MAA5E,SAEF,yBAAKjE,GAAG,kBACN,kBAAC,EAAD,CACEM,KAAMD,KAAKF,MAAM+D,aACjBrC,UAAW,YAEb,yCAAexB,KAAKF,MAAMiE,YAC1B,kBAAC2B,EAAA,EAAD,CACEhD,QAAQ,oDACRiD,SAA6C,cAAnC7B,EAAK9D,KAAKF,MAAM6D,UAAUN,KACpCuC,QACE,8BAAM,kBAACP,EAAA,EAAD,CACJhD,QAASrC,KAAKgE,QACd2B,SAA6C,cAAnC7B,EAAK9D,KAAKF,MAAM6D,UAAUN,MAFhC,oB,GA9FEzB,IAAMC,WAoH5BgE,E,kDACJ,WAAYpG,GAAQ,IAAD,8BACjB,cAAMA,IAURqG,YAAc,WAAQ,EAAKlG,SAAS,CAAEmG,OAAQ,EAAKjG,MAAMiG,SAXtC,EAcnBC,KAAO,WACD,EAAKlG,MAAMiG,OAAuC,cAA9B,EAAKtG,MAAMkF,UAAUtB,MAC3C,EAAKzD,SAAS,CAAEK,KAAM,EAAKR,MAAMwE,SAAS,EAAKnE,MAAMG,SAbvD,EAAKH,MAAQ,CACXiG,OAAO,EACPpB,UAAW,EAAKlF,MAAMkF,UACtB1E,KAAM,EAAKR,MAAMkF,UAAU1E,KAC3BgG,MAAOC,YAAY,EAAKF,KAAM,MAPf,E,qDAmBT,IAGJ3E,EAHG,OAEH8E,EAAWnG,KAAKF,MAAMG,KAAKY,OAQ/B,OALmBQ,EAAf8E,GAAY,EAAc,OACrBA,GAAY,GAAe,OAC3BA,GAAY,GAAe,OACpB,OAGd,yBACExE,UAAU,iBACVD,aAAc1B,KAAK8F,YACnBM,aAAcpG,KAAK8F,YACnBzD,QAAS,kBAAM,EAAK5C,MAAMmF,eAAe,EAAKnF,MAAMmB,KAEpD,2BAAIZ,KAAKP,MAAMkF,UAAUpB,MACzB,kBAAC,EAAD,CACEtD,KAAMD,KAAKF,MAAMG,KACjBuB,UAAU,UACVH,SAAUA,S,GAzCQO,IAAMC,WAgDnB4B,IC+FA4C,E,kDAvQb,WAAY5G,GAAQ,IAAD,uBACjB,cAAMA,IAwBR6G,eAAiB,WACX,EAAKxG,MAAMyG,QAAUC,cAAc,EAAKP,OACrC,EAAKA,MAAQC,YAAY,EAAKF,KAAM,EAAKlG,MAAM2G,UACtD,EAAK7G,SAAS,CAAE2G,SAAU,EAAKzG,MAAMyG,WA5BpB,EA+BnBG,kBAAoB,WAAQ,EAAK9G,SAAS,CAAE+G,oBAAoB,KA/B7C,EAgCnBC,mBAAqB,WAAQ,EAAKhH,SAAS,CAAE+G,oBAAoB,KAhC9C,EAkCnBE,kBAAoB,WAAQ,EAAKjH,SAAS,CAAEkH,mBAAmB,KAlC5C,EAmCnBC,mBAAqB,WAAQ,EAAKnH,SAAS,CAAEkH,mBAAmB,KAnC7C,EAqCnBE,2BAA6B,SAAC9F,GAAS,EAAKtB,SAAS,CAAE6G,SAAUvF,KArC9C,EAsCnB+F,kBAAoB,SAAC/F,GAAS,EAAKtB,SAAS,CAAEsH,MAAOhG,KAtClC,EAyCnB8E,KAAO,WACL,IAAImB,EAAU,EAAKC,KAAK,EAAKtH,MAAMG,MAGnC,EAAKL,SAAS,CACZK,KAAMkH,EACNpD,WAAY,EAAKjE,MAAMiE,WAAa,KA/CrB,EAoDnBqD,KAAO,SAACnH,GAGN,IADA,IAAIkH,EAAUlH,EAAKE,KAAI,SAASC,GAAO,OAAOA,EAAIC,WACzCW,EAAI,EAAGA,EAAIf,EAAKY,OAAQG,IAC/B,IAAK,IAAIG,EAAI,EAAGA,EAAIlB,EAAK,GAAGY,OAAQM,IAAI,CACtC,IAAIkG,EAAY,EAAKC,gBAAgBtG,EAAGG,EAAGlB,GACvC,EAAKsH,gBAAgBvG,EAAGG,EAAGlB,IAEzBoH,EAAY,GAAKA,EAAY,KAAGF,EAAQnG,GAAGG,IAAK,GAG/B,IAAdkG,IAAiBF,EAAQnG,GAAGG,IAAK,GAI9C,OAAOgG,GAnEU,EAuEnBG,gBAAkB,SAACtG,EAAGG,EAAGqG,GACvB,IAAIC,EAAQ,EAUZ,OATI,EAAKF,gBAAgBvG,EAAI,EAAGG,EAAI,EAAGqG,IAAIC,IACvC,EAAKF,gBAAgBvG,EAAI,EAAGG,EAAGqG,IAAIC,IACnC,EAAKF,gBAAgBvG,EAAI,EAAGG,EAAI,EAAGqG,IAAIC,IACvC,EAAKF,gBAAgBvG,EAAGG,EAAI,EAAGqG,IAAIC,IACnC,EAAKF,gBAAgBvG,EAAGG,EAAI,EAAGqG,IAAIC,IACnC,EAAKF,gBAAgBvG,EAAI,EAAGG,EAAI,EAAGqG,IAAIC,IACvC,EAAKF,gBAAgBvG,EAAI,EAAGG,EAAGqG,IAAIC,IACnC,EAAKF,gBAAgBvG,EAAI,EAAGG,EAAI,EAAGqG,IAAIC,IAEpCA,GAlFU,EAqFnBF,gBAAkB,SAACvG,EAAGG,EAAGlB,GAAW,OAAQe,GAAK,GAAKG,GAAK,GAAKH,EAAIf,EAAKY,QAAUM,EAAIlB,EAAK,GAAGY,QAAUZ,EAAKe,GAAGG,IArF9F,EAwFnBuG,oBAAsB,SAACzH,GACrB,EAAKL,SAAS,CACZkH,mBAAmB,EACnBa,mBAAoB1H,KA3FL,EAgGnB2H,UAAY,WAEV,IAAI3H,EAAQ,IAAIwE,MAAM,EAAK3E,MAAM+H,MAAOnD,OAAOvE,KAAI,WAAQ,OAAO,IAAIsE,MAAM,EAAK3E,MAAMgI,MAAMpD,MAAK,MAElG,EAAK9E,SAAS,CACZK,KAAMA,EACN8D,WAAY,KAtGG,EA2GnBgE,eAAiB,WAGf,IAFA,IAAI9H,EAAQ,IAAIwE,MAAM,EAAK3E,MAAM+H,MAAOnD,OAAOvE,KAAI,WAAQ,OAAO,IAAIsE,MAAM,EAAK3E,MAAMgI,MAAMpD,MAAK,MAEzF9D,EAAI,EAAGA,EAAI,EAAKd,MAAM+H,KAAMjH,IACnC,IAAK,IAAIE,EAAI,EAAGA,EAAI,EAAKhB,MAAMgI,KAAMhH,IACG,IAAlCkH,KAAKC,MAAsB,EAAhBD,KAAKE,YAClBjI,EAAKW,GAAGE,IAAK,GAEnB,EAAKlB,SAAS,CACZK,KAAMA,EACN8D,WAAY,KArHG,EA0HnBoE,YAAc,SAACxI,GACT,EAAKG,MAAM6H,mBACb,EAAKS,sBAAsBzI,GAE3B,EAAK0I,WAAW1I,IA9HD,EAkInByI,sBAAwB,SAACzI,GACvBA,EAAKA,EAAGa,MAAM,KAKd,IAJA,IAAIC,EAAIC,SAASf,EAAG,IAChBgB,EAAID,SAASf,EAAG,IAChBO,EAAW,EAAKJ,MAAMG,KAAKE,KAAI,SAASC,GAAO,OAAOA,EAAIC,WAErDO,EAAI,EAAGA,EAAI,EAAKd,MAAM6H,mBAAmB9G,OAAQD,IACxD,IAAK,IAAIE,EAAI,EAAGA,EAAI,EAAKhB,MAAM6H,mBAAmB,GAAG9G,OAAQC,IACvDL,EAAIG,EAAIV,EAASW,QAAUF,EAAIG,EAAIZ,EAAS,GAAGW,SACjDX,EAASO,EAAIG,GAAGD,EAAIG,GAAK,EAAKhB,MAAM6H,mBAAmB/G,GAAGE,IAKhE,EAAKlB,SAAS,CACZK,KAAMC,EACNyH,mBAAoB,QAlJL,EAuJnBU,WAAa,SAAC1I,GACZ,IAAK,EAAKG,MAAMyG,QAAQ,CAEtB,IAAIvF,GADJrB,EAAKA,EAAGa,MAAM,MACH,GACPW,EAAIxB,EAAG,GAEPM,EAAO,EAAKH,MAAMG,KAAKI,QAE3BJ,EAAKe,GAAGG,IAAMlB,EAAKe,GAAGG,GAEtB,EAAKvB,SAAS,CAAEK,KAAMA,MAjKP,OAMjB,EAAKgG,MAAQ,KACb,EAAK5E,SAAW,OAEhB,EAAKvB,MAAQ,CAEX+H,KARS,GASTC,KARS,GAST7H,KAAO,IAAIwE,MAVF,IAUeC,OAAOvE,KAAI,WAAQ,OAAO,IAAIsE,MAT7C,IASyDC,MAAK,MACvE6B,SAAS,EACTxC,WAAY,EAEZ4D,mBAAoB,KACpBlB,SAAU,IACVS,MAAO,UACPP,oBAAoB,EACpBG,mBAAmB,GArBJ,E,qDAqKT,IAAD,OAaHwB,EAXS,CACX,CAAE/E,KAAM,QAASgF,IAAK,WACtB,CAAEhF,KAAM,MAAOgF,IAAK,WACpB,CAAEhF,KAAM,SAAUgF,IAAK,WACvB,CAAEhF,KAAM,SAAUgF,IAAK,WACvB,CAAEhF,KAAM,QAASgF,IAAK,WACtB,CAAEhF,KAAM,OAAQgF,IAAK,WACrB,CAAEhF,KAAM,SAAUgF,IAAK,WACvB,CAAEhF,KAAM,OAAQgF,IAAK,YAGGpI,KAAI,SAACgB,EAAGP,GAChC,OAAO,kBAAC,EAAD,CACLmC,OAAK,EACLQ,KAAK,QACLH,WAAYjC,EAAEoH,IACd9F,MAAOtB,EAAEoH,IACT5F,MAAOxB,EAAEoC,KACTlB,QAAS,EAAK4E,kBACd3D,QAASnC,EAAEoH,MAAQ,EAAKzI,MAAMoH,MAC9BjG,IAAKL,OAIT,OACE,yBAAKe,UAAU,MAAM6G,YAAaxI,KAAKyI,gBACrC,4CACA,kBAAC,EAAD,CAEErH,aAAW,EACXnB,KAAMD,KAAKF,MAAMG,KACjBwB,cAAezB,KAAKmI,YACpB3G,UAAWxB,KAAKF,MAAMoH,MACtB7F,SAAUrB,KAAKqB,SACff,WAAYN,KAAKF,MAAM6H,qBAEzB,0CAAgB3H,KAAKF,MAAMiE,YAG3B,yBAAKpC,UAAU,oBACb,kBAAC0D,EAAA,EAAD,CACEqD,SAAO,EAACpD,MAAI,EACZjD,QAASrC,KAAKsG,eACdX,SAA4C,OAAlC3F,KAAKF,MAAM6H,oBAErB,kBAAClC,EAAA,EAAD,CAAMlC,KAAMvD,KAAKF,MAAMyG,QAAU,QAAU,UAE7C,kBAAClB,EAAA,EAAD,CAAQhD,QAASrC,KAAKgG,KAAML,SAAU3F,KAAKF,MAAMyG,SAA6C,OAAlCvG,KAAKF,MAAM6H,oBAAvE,QACA,kBAACtC,EAAA,EAAD,CAAQC,MAAI,EAACjD,QAASrC,KAAK6G,kBAAmBlB,SAAU3F,KAAKF,MAAMyG,SAA6C,OAAlCvG,KAAKF,MAAM6H,oBACvF,kBAAClC,EAAA,EAAD,CAAMlC,KAAK,oBAEb,kBAAC8B,EAAA,EAAD,CAAQhD,QAASrC,KAAK4H,UAAWjC,SAAU3F,KAAKF,MAAMyG,SAA6C,OAAlCvG,KAAKF,MAAM6H,oBAA5E,cACA,kBAACtC,EAAA,EAAD,CAAQhD,QAASrC,KAAK+H,eAAgBpC,SAAU3F,KAAKF,MAAMyG,SAA6C,OAAlCvG,KAAKF,MAAM6H,oBAAjF,QACA,kBAACtC,EAAA,EAAD,CAAQC,MAAI,EAACjD,QAASrC,KAAK0G,kBAAmBf,SAAU3F,KAAKF,MAAMyG,SAA6C,OAAlCvG,KAAKF,MAAM6H,oBACvF,kBAAClC,EAAA,EAAD,CAAMlC,KAAK,cAKf,kBAACsB,EAAA,EAAD,CACEC,WAAS,EACTC,QAAS/E,KAAK4G,mBACd3B,KAAMjF,KAAKF,MAAM6G,oBAEjB,kBAAC9B,EAAA,EAAMK,OAAP,iBACA,kBAACL,EAAA,EAAMM,QAAP,KACE,6CACA,kBAAC,SAAD,CACEwD,UAAQ,EACRzB,MAAM,OACN0B,SAAU,CACRC,MAAO,IAAK7I,KAAKF,MAAM2G,SACvBqC,IAAK,EACLC,IAAK,EACL3B,KAAM,EACN5E,SAAU,SAAAC,GAAK,OAAI,EAAKuE,2BAA2B,IAAKvE,OAI5D,wCAAoB,6BACnB6F,IAKL,kBAAC,EAAD,CACErD,KAAMjF,KAAKF,MAAMgH,kBACjB7C,SAAUjE,KAAKoH,KACfpC,UAAWhF,KAAK+G,mBAChBvB,gBAAiBxF,KAAK0H,2B,GAjQd9F,IAAMC,WCHxBmH,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,W","file":"static/js/main.1741e7ff.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Grid.css';\r\n    \r\n/* Grid displays a grid.\r\n * \r\n * Props: * interactive (bool): determines whether cells can be toggled\r\n *        * grid (matrix): grid data\r\n *        * cellClickFunc(cellId): function on cell click\r\n *        * cellColor: hex cell color\r\n *        * cellSize: cell size in pixels\r\n *        * shadowGrid: grid of structure being placed\r\n*/\r\nclass Grid extends React.Component {\r\n  constructor(props){\r\n    super(props);\r\n    this.state = {\r\n      // shadow cell on mouse hover\r\n      shadowLocation: '0_0'\r\n    };\r\n  }\r\n  \r\n  // set shadow to cell\r\n  handleMouseEnter = (id) => {\r\n    this.setState({ shadowLocation: id });\r\n  }\r\n\r\n  render() {\r\n    // grid to be displayed\r\n    let gridTable = null;\r\n    \r\n    // create grid\r\n    if (this.props.grid){\r\n      let gridCopy = this.props.grid.map(function(arr) { return arr.slice(); });\r\n\r\n      // add shadow of the grid that is being placed\r\n      if (this.props.shadowGrid){\r\n        let cellId = (this.state.shadowLocation.slice()).split('_');\r\n        let x = parseInt(cellId[0]);\r\n        let y = parseInt(cellId[1]);\r\n  \r\n        for (let i = 0; i < this.props.shadowGrid.length; i++){\r\n          for (let j = 0; j < this.props.shadowGrid[0].length; j++){\r\n            if (x + i < this.props.grid.length && y + j < this.props.grid[0].length){\r\n              gridCopy[x + i][y + j] = this.props.shadowGrid[i][j];\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      // add cells to table\r\n      gridTable = gridCopy.map((row, r) => {\r\n        return <tr key={r}>\r\n          {\r\n            row.map((val, c) => {\r\n              return <Cell\r\n                interactive={this.props.interactive}\r\n                cellSize={this.props.cellSize}\r\n                boxId={r + '_' + c}\r\n                key={r + '_' + c}\r\n                populated={val}\r\n                cellColor={this.props.cellColor}\r\n                cellClickFunc={this.props.cellClickFunc}\r\n                onMouseEnter={this.handleMouseEnter}\r\n              />;\r\n            })\r\n          }\r\n        </tr>\r\n      })\r\n    }\r\n\r\n    return (\r\n      <table className='grid'>\r\n        <tbody>\r\n          { gridTable }\r\n        </tbody>\r\n      </table>\r\n    );\r\n  }\r\n}\r\n\r\n/* Cell displays a cell.\r\n * \r\n * Props: * interactive (bool): determines whether the cell can be toggled\r\n *        * cellSize: cell size in pixels\r\n *        * boxId: id of the box. Format: r_c\r\n *        * populated (bool): whether the cell is populated or not\r\n *        * cellColor: hex cell color\r\n *        * cellClickFunc: function to call when a cell is clicked\r\n *        * onMouseEnter: function for mouse hover\r\n*/\r\nclass Cell extends React.Component {\r\n\r\n  render() {\r\n    let cellStyle = {\r\n      backgroundColor: this.props.populated ? this.props.cellColor : undefined,\r\n      height: this.props.cellSize ? this.props.cellSize : '20px',\r\n      width: this.props.cellSize ? this.props.cellSize : '20px'\r\n    }\r\n\r\n    return (\r\n      <td\r\n        style={cellStyle}\r\n        className={this.props.interactive ? 'interactive cell' : 'cell'}\r\n        onClick={this.props.interactive ? () => {this.props.cellClickFunc(this.props.boxId)} : null}\r\n        onMouseEnter={() => this.props.onMouseEnter(this.props.boxId)}\r\n      />\r\n    );\r\n  }\r\n}\r\n\r\nexport default Grid;","import React from 'react';\r\nimport './ImageRadio.css';\r\n\r\n/* ImageRadio displays a custom radio with an image.\r\n * \r\n * Props: * small/medium/large: image size\r\n *        * name: radio name\r\n *        * solidColor: fills image with a solid color\r\n *        * value: radio value\r\n *        * label: radio label\r\n *        * onClick: handle radio click\r\n *        * checked: checked\r\n * \r\n * Notes: * checked should be store in the parent class' state.\r\n*/\r\nclass ImageRadio extends React.Component {\r\n  \r\n  handleClick = () => {\r\n    if (this.props.onChange) this.props.onChange(this.props.value);\r\n    else if (this.props.onClick) this.props.onClick(this.props.value);\r\n  }\r\n\r\n  render() {\r\n    // set radio classes\r\n    let classes = 'imageRadio';\r\n    if (this.props.large) classes += ' large';\r\n    else if (this.props.medium) classes += ' medium';\r\n    else if (this.props.small) classes += ' small';\r\n\r\n    let content;\r\n    if (this.props.imgSrc) content = <img className='imageRadioContent' src={this.props.imgSrc} alt={this.props.altText} />\r\n    else if (this.props.solidColor) content = <div className='imageRadioContent' style={{backgroundColor: this.props.solidColor}} />\r\n\r\n    let label;\r\n    if (this.props.label) label=<p>{this.props.label}</p>\r\n    return(\r\n      <div className='imageRadioWrapper'>\r\n        <input\r\n          type='radio'\r\n          checked={this.props.checked}\r\n          name={this.props.name}\r\n          value={this.props.value}\r\n          onClick={this.handleClick}\r\n        />\r\n        <div className={classes}>\r\n          {content}\r\n          {label}\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default ImageRadio;","// provides preset structures in json format\r\n\r\nexport const structures = [\r\n  {\r\n    \"name\": \"Blinker\",\r\n    \"dimensions\": [3, 3],\r\n    \"type\": \"oscillator\",\r\n    \"period\": 2,\r\n    \"grid\": [\r\n      [0, 0, 0],\r\n      [1, 1, 1],\r\n      [0, 0, 0]\r\n    ]\r\n  },\r\n  {\r\n    \"name\": \"Toad\",\r\n    \"dimensions\": [4, 4],\r\n    \"type\": \"oscillator\",\r\n    \"period\": 2,\r\n    \"grid\": [\r\n      [0, 0, 0, 0],\r\n      [0, 1, 1, 1],\r\n      [1, 1, 1, 0],\r\n      [0, 0, 0, 0]\r\n    ]\r\n  },\r\n  {\r\n    \"name\": \"Beacon\",\r\n    \"dimensions\": [4, 4],\r\n    \"type\": \"oscillator\",\r\n    \"period\": 2,\r\n    \"grid\": [\r\n      [1, 1, 0, 0],\r\n      [1, 1, 0, 0],\r\n      [0, 0, 1, 1],\r\n      [0, 0, 1, 1]\r\n    ]\r\n  },\r\n  {\r\n    \"name\": \"Pulsar\",\r\n    \"dimensions\": [15, 15],\r\n    \"type\": \"oscillator\",\r\n    \"period\": 3,\r\n    \"grid\": [\r\n      [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0],\r\n      [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0],\r\n      [0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0],\r\n      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n      [1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1],\r\n      [0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0],\r\n      [0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0],\r\n      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n      [0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0],\r\n      [0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0],\r\n      [1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1],\r\n      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n      [0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0],\r\n      [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0],\r\n      [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0]\r\n    ]\r\n  },\r\n  {\r\n    \"name\": \"Pentadecathlon\",\r\n    \"dimensions\": [9, 16],\r\n    \"type\": \"oscillator\",\r\n    \"period\": 15,\r\n    \"grid\": [\r\n      [0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n      [0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n      [0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n      [0, 0, 0, 0, 1, 0, 0, 0, 0],\r\n      [0, 0, 0, 1, 0, 1, 0, 0, 0],\r\n      [0, 0, 1, 0, 0, 0, 1, 0, 0],\r\n      [0, 0, 1, 0, 0, 0, 1, 0, 0],\r\n      [0, 0, 1, 0, 0, 0, 1, 0, 0],\r\n      [0, 0, 1, 0, 0, 0, 1, 0, 0],\r\n      [0, 0, 1, 0, 0, 0, 1, 0, 0],\r\n      [0, 0, 1, 0, 0, 0, 1, 0, 0],\r\n      [0, 0, 0, 1, 0, 1, 0, 0, 0],\r\n      [0, 0, 0, 0, 1, 0, 0, 0, 0],\r\n      [0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n      [0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n      [0, 0, 0, 0, 0, 0, 0, 0, 0]\r\n    ]\r\n  },\r\n  {\r\n    \"name\": \"Glider\",\r\n    \"dimensions\": [3, 3],\r\n    \"type\": \"spaceship\",\r\n    \"grid\": [\r\n      [0, 0, 1],\r\n      [1, 0, 1],\r\n      [0, 1, 1]\r\n    ]\r\n  },\r\n  {\r\n    \"name\": \"Medium Spaceship\",\r\n    \"dimensions\": [5, 4],\r\n    \"type\": \"spaceship\",\r\n    \"grid\": [\r\n      [1, 0, 0, 1, 0],\r\n      [0, 0, 0, 0, 1],\r\n      [1, 0, 0, 0, 1],\r\n      [0, 1, 1, 1, 1]\r\n    ]\r\n  }\r\n]","import React from 'react';\r\nimport { Modal, Button, Popup, Icon } from 'semantic-ui-react';\r\nimport './StructureMenu.css';\r\n\r\nimport { structures as data } from './structures';\r\nimport Grid from './../Grid';\r\n\r\n/* StructureMenu displays the structure menu.\r\n * \r\n * Props: * open: whether the menu is visible\r\n *        * stepFunc: function to step a grid forward\r\n *        * closeFunc: function to close the menu\r\n *        * placeStructFunc: function to start placing a structure\r\n*/\r\nclass StructureMenu extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      selected: 0, // id of selected structure\r\n      detailsOpen: false, // details pane open?\r\n      selectedGrid: data[0].grid, // grid data for selected structure\r\n      generation: 0 // generation of the structure in the details pane\r\n    }\r\n  }\r\n\r\n  // selects a new item to view in the details pane\r\n  selectItem = (i) => {\r\n    this.setState({\r\n      selected: i,\r\n      detailsOpen: true,\r\n      selectedGrid: data[i].grid,\r\n      generation: 0\r\n    });\r\n  }\r\n\r\n  // steps a grid forward\r\n  nextGen = () => {\r\n    this.setState({\r\n      selectedGrid: this.props.stepFunc(this.state.selectedGrid),\r\n      generation: (this.state.generation + 1) % data[this.state.selected].period\r\n    });\r\n  }\r\n\r\n  componentDidMount = () => {\r\n\r\n    // provide one unit of padding around the structure\r\n    data.forEach(s => {\r\n      s.grid.forEach(row => {\r\n        row.unshift(false);\r\n        row.push(false);\r\n      });\r\n    \r\n      let emptyRow = new Array(s.grid[0].length).fill(false);\r\n      s.grid.unshift(emptyRow);\r\n      s.grid.push(emptyRow);\r\n    });\r\n  }\r\n\r\n  render() {\r\n    // array of structures to display\r\n    let structures = data.map((s, i) => {\r\n      return <StructureItem\r\n        key={i}\r\n        i={i}\r\n        structure={s}\r\n        stepFunc={this.props.stepFunc}\r\n        selectItemFunc={this.selectItem}\r\n      />\r\n    });\r\n\r\n    return (\r\n      <Modal\r\n        closeIcon\r\n        onClose={this.props.closeFunc}\r\n        open={this.props.open}\r\n      >\r\n        <Modal.Header>Structures</Modal.Header>\r\n        <Modal.Content>\r\n          <div id='modal-content'>\r\n            {/* main panel */}\r\n            <div id='structure-list' className={!this.state.detailsOpen ? 'visible' : null}>\r\n              {structures}\r\n            </div>\r\n\r\n            {/* detail panel */}\r\n            <div id='structure-details' className={this.state.detailsOpen ? 'visible' : null}>\r\n              <div>\r\n                <h3>{data[this.state.selected].name}</h3>\r\n                <p>Dimensions: {data[this.state.selected].dimensions[0]}x{data[this.state.selected].dimensions[1]}</p>\r\n                <p>Period: {data[this.state.selected].period}</p>\r\n                <p>Type: {data[this.state.selected].type}</p>\r\n                <Button icon labelPosition='left' onClick={() => this.props.placeStructFunc(this.state.selectedGrid)}>\r\n                  Place this structure!\r\n                  <Icon name='paint brush' />\r\n                </Button>\r\n                <Button className='back-button' onClick={() => this.setState({ detailsOpen: false })}>Back</Button>\r\n              </div>\r\n              <div id='structure-grid'>\r\n                <Grid\r\n                  grid={this.state.selectedGrid}\r\n                  cellColor={'#616161'}\r\n                />\r\n                <p>Generation {this.state.generation}</p>\r\n                <Popup\r\n                  content='Animation for spaceships is currently unavailable'\r\n                  disabled={data[this.state.selected].type !== 'spaceship'}\r\n                  trigger={\r\n                    <span><Button\r\n                      onClick={this.nextGen}\r\n                      disabled={data[this.state.selected].type === 'spaceship'}\r\n                    >Step</Button></span>\r\n                  }\r\n                />\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </Modal.Content>\r\n      </Modal>\r\n    );\r\n  }\r\n}\r\n\r\n/* StructureItem displays a single structure in the structure menu.\r\n * \r\n * Props: * i: id of structure\r\n *        * structure: structure data\r\n *        * stepFunc: function to step a grid forward\r\n *        * selectItemFunc: selects current grid to view in detail panel\r\n*/\r\nclass StructureItem extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      hover: false,\r\n      structure: this.props.structure,\r\n      grid: this.props.structure.grid,\r\n      timer: setInterval(this.play, 1000)\r\n    }\r\n  }\r\n\r\n  toggleHover = () => { this.setState({ hover: !this.state.hover }) }\r\n\r\n  // steps the grid forward one\r\n  play = () => {\r\n    if (this.state.hover && this.props.structure.type !== 'spaceship')\r\n      this.setState({ grid: this.props.stepFunc(this.state.grid) })\r\n  }\r\n\r\n  render() {\r\n    // different cell sizes for different grid sizes\r\n    let gridSize = this.state.grid.length;\r\n    let cellSize;\r\n\r\n    if (gridSize <= 5) cellSize = '20px';\r\n    else if (gridSize <= 10) cellSize = '17px';\r\n    else if (gridSize <= 15) cellSize = '13px';\r\n    else cellSize = '10px';\r\n\r\n    return (\r\n      <div\r\n        className='structure-item'\r\n        onMouseEnter={this.toggleHover}\r\n        onMouseLeave={this.toggleHover}\r\n        onClick={() => this.props.selectItemFunc(this.props.i)}\r\n      >\r\n        <p>{this.props.structure.name}</p>\r\n        <Grid\r\n          grid={this.state.grid}\r\n          cellColor='#616161'\r\n          cellSize={cellSize}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default StructureMenu;","import React from 'react';\r\nimport './App.css';\r\nimport  { Button, Icon, Modal } from 'semantic-ui-react';\r\nimport { Slider } from 'react-semantic-ui-range';\r\n\r\nimport Grid from './Grid';\r\nimport ImageRadio from './ImageRadio';\r\nimport StructureMenu from './structures/StructureMenu';\r\n\r\nclass App extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    let rows = 28;\r\n    let cols = 40;\r\n\r\n    this.timer = null;\r\n    this.cellSize = '20px';\r\n\r\n    this.state = {\r\n      // main grid\r\n      rows: rows,\r\n      cols: cols,\r\n      grid: (new Array(rows)).fill().map(() => { return new Array(cols).fill(false) }),\r\n      playing: false,\r\n      generation: 0,\r\n\r\n      selectedStructGrid: null, // grid of the structure that is being placed\r\n      interval: 500,\r\n      color: '#242424',\r\n      structureModalOpen: false,\r\n      structureMenuOpen: false\r\n    }\r\n  }\r\n\r\n  toggleAutoPlay = () => {\r\n    if (this.state.playing){ clearInterval(this.timer) }\r\n    else { this.timer = setInterval(this.play, this.state.interval) }\r\n    this.setState({ playing: !this.state.playing });\r\n  }\r\n\r\n  openSettingsModal = () => { this.setState({ structureModalOpen: true }) }\r\n  closeSettingsModal = () => { this.setState({ structureModalOpen: false }) }\r\n\r\n  openStructureMenu = () => { this.setState({ structureMenuOpen: true }) }\r\n  closeStructureMenu = () => { this.setState({ structureMenuOpen: false }) }\r\n\r\n  handleIntervalSliderChange = (val) => {this.setState({ interval: val })}\r\n  handleColorChange = (val) => {this.setState({ color: val })}\r\n\r\n  // steps one generation on the main grid\r\n  play = () => {\r\n    let newGrid = this.step(this.state.grid);\r\n\r\n    // update grid and increment generation counter\r\n    this.setState({\r\n      grid: newGrid,\r\n      generation: this.state.generation + 1\r\n    });\r\n  }\r\n\r\n  // returns grid of the next generation\r\n  step = (grid) => {\r\n    // work on a copy of the grid\r\n    let newGrid = grid.map(function(arr) { return arr.slice(); });\r\n    for (let r = 0; r < grid.length; r++){\r\n      for (let c = 0; c < grid[0].length; c++){\r\n        let neighours = this.nLiveNeighbours(r, c, grid);\r\n        if (this.cellIsPopulated(r, c, grid)){\r\n          // a cell dies if there are less than 2 or more than 3 neighbours\r\n          if (neighours < 2 || neighours > 3) newGrid[r][c] = false;\r\n        }\r\n        // an empty cell becomes a live cell if there are exactly 3 neighbours\r\n        else if (neighours === 3) newGrid[r][c] = true;\r\n      }\r\n    }\r\n\r\n    return newGrid;\r\n  }\r\n\r\n  // returns the number of living cells neighbouring the cell at row r, column c in grid g\r\n  nLiveNeighbours = (r, c, g) => {\r\n    let count = 0;\r\n    if (this.cellIsPopulated(r - 1, c - 1, g)) count++;\r\n    if (this.cellIsPopulated(r - 1, c, g)) count++;\r\n    if (this.cellIsPopulated(r - 1, c + 1, g)) count++;\r\n    if (this.cellIsPopulated(r, c - 1, g)) count++;\r\n    if (this.cellIsPopulated(r, c + 1, g)) count++;\r\n    if (this.cellIsPopulated(r + 1, c - 1, g)) count++;\r\n    if (this.cellIsPopulated(r + 1, c, g)) count++;\r\n    if (this.cellIsPopulated(r + 1, c + 1, g)) count++;\r\n    // console.log(count)\r\n    return count;\r\n  }\r\n\r\n  cellIsPopulated = (r, c, grid) => { return (r >= 0 && c >= 0 && r < grid.length && c < grid[0].length && grid[r][c]) }\r\n\r\n  // close structure menu and select structure to place\r\n  startPlaceStructure = (grid) => {\r\n    this.setState({\r\n      structureMenuOpen: false,\r\n      selectedStructGrid: grid\r\n    });\r\n  }\r\n\r\n  // clears the main grid\r\n  resetGrid = () => {\r\n    //let grid = Array(this.state.rows).fill(Array(this.state.cols).fill(false));\r\n    let grid = (new Array(this.state.rows)).fill().map(() => { return new Array(this.state.cols).fill(false) });\r\n    \r\n    this.setState({\r\n      grid: grid,\r\n      generation: 0\r\n    });\r\n  }\r\n\r\n  // fills each cell in the main grid with a random on/off state\r\n  randomSeedGrid = () => {\r\n    let grid = (new Array(this.state.rows)).fill().map(() => { return new Array(this.state.cols).fill(false) });\r\n\r\n    for (let i = 0; i < this.state.rows; i++)\r\n      for (let j = 0; j < this.state.cols; j++)\r\n        if (Math.floor(Math.random() * 5) === 1)\r\n          grid[i][j] = true;\r\n    \r\n    this.setState({\r\n      grid: grid,\r\n      generation: 0\r\n    });\r\n  }\r\n  \r\n  // determines what happens when a cell is clicked\r\n  onCellClick = (id) => {\r\n    if (this.state.selectedStructGrid)\r\n      this.confirmPlaceStructure(id);\r\n    else\r\n      this.toggleCell(id);\r\n  }\r\n\r\n  // places the structure on the grid\r\n  confirmPlaceStructure = (id) => {\r\n    id = id.split('_');\r\n    let x = parseInt(id[0]);\r\n    let y = parseInt(id[1]);\r\n    let gridCopy = this.state.grid.map(function(arr) { return arr.slice(); });\r\n\r\n    for (let i = 0; i < this.state.selectedStructGrid.length; i++){\r\n      for (let j = 0; j < this.state.selectedStructGrid[0].length; j++){\r\n        if (x + i < gridCopy.length && y + j < gridCopy[0].length){\r\n          gridCopy[x + i][y + j] = this.state.selectedStructGrid[i][j];\r\n        }\r\n      }\r\n    }\r\n\r\n    this.setState({\r\n      grid: gridCopy,\r\n      selectedStructGrid: null\r\n    });\r\n  }\r\n\r\n  // turns a cell on or off based on its current status\r\n  toggleCell = (id) => {\r\n    if (!this.state.playing){\r\n      id = id.split('_');\r\n      let r = id[0];\r\n      let c = id[1];\r\n  \r\n      let grid = this.state.grid.slice();\r\n  \r\n      grid[r][c] = !grid[r][c];\r\n  \r\n      this.setState({ grid: grid });\r\n    }\r\n  }\r\n\r\n  render() {\r\n    // color options in settings\r\n    let colors = [\r\n      { name: 'Black', hex: '#242424' },\r\n      { name: 'Red', hex: '#e60000' },\r\n      { name: 'Orange', hex: '#ebab34' },\r\n      { name: 'Yellow', hex: '#f0e446' },\r\n      { name: 'Green', hex: '#1dc223' },\r\n      { name: 'Blue', hex: '#1555c2' },\r\n      { name: 'Purple', hex: '#9715c2' },\r\n      { name: 'Pink', hex: '#f760e3' }\r\n    ];\r\n\r\n    let colorOptions = colors.map((c, i) => {\r\n      return <ImageRadio\r\n        small\r\n        name='color'\r\n        solidColor={c.hex}\r\n        value={c.hex}\r\n        label={c.name}\r\n        onClick={this.handleColorChange}\r\n        checked={c.hex === this.state.color}\r\n        key={i}\r\n      />\r\n    });\r\n\r\n    return (\r\n      <div className='app' onMouseMove={this.updateCursorXY}>\r\n        <h1>Game of Life</h1>\r\n        <Grid\r\n          // grid is interactive unless a structure is being placed\r\n          interactive\r\n          grid={this.state.grid}\r\n          cellClickFunc={this.onCellClick}\r\n          cellColor={this.state.color}\r\n          cellSize={this.cellSize}\r\n          shadowGrid={this.state.selectedStructGrid}\r\n        />\r\n        <p>Generation: {this.state.generation}</p>\r\n\r\n        {/* bottom action bar */}\r\n        <div className='button-container'>\r\n          <Button\r\n            primary icon\r\n            onClick={this.toggleAutoPlay}\r\n            disabled={this.state.selectedStructGrid !== null}\r\n          >\r\n            <Icon name={this.state.playing ? 'pause' : 'play'} />\r\n          </Button>\r\n          <Button onClick={this.play} disabled={this.state.playing || this.state.selectedStructGrid !== null}>Step</Button>\r\n          <Button icon onClick={this.openStructureMenu} disabled={this.state.playing || this.state.selectedStructGrid !== null}>\r\n            <Icon name='folder outline' />\r\n          </Button>\r\n          <Button onClick={this.resetGrid} disabled={this.state.playing || this.state.selectedStructGrid !== null}>Reset Grid</Button>\r\n          <Button onClick={this.randomSeedGrid} disabled={this.state.playing || this.state.selectedStructGrid !== null}>Seed</Button>\r\n          <Button icon onClick={this.openSettingsModal} disabled={this.state.playing || this.state.selectedStructGrid !== null}>\r\n            <Icon name='setting' />\r\n          </Button>\r\n        </div>\r\n\r\n        {/* settings modal */}\r\n        <Modal\r\n          closeIcon\r\n          onClose={this.closeSettingsModal}\r\n          open={this.state.structureModalOpen}\r\n        >\r\n          <Modal.Header>Settings</Modal.Header>\r\n          <Modal.Content>\r\n            <label>Play Speed</label>\r\n            <Slider\r\n              discrete \r\n              color='blue'\r\n              settings={{\r\n                start: 1000/this.state.interval,\r\n                min: 1,\r\n                max: 5,\r\n                step: 1,\r\n                onChange: value => this.handleIntervalSliderChange(1000/value)\r\n              }}\r\n            />\r\n\r\n            <label>Color</label><br />\r\n            {colorOptions}\r\n          </Modal.Content>\r\n        </Modal>\r\n\r\n        {/* structure menu */}\r\n        <StructureMenu\r\n          open={this.state.structureMenuOpen}\r\n          stepFunc={this.step}\r\n          closeFunc={this.closeStructureMenu}\r\n          placeStructFunc={this.startPlaceStructure}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport 'semantic-ui-css/semantic.min.css';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);"],"sourceRoot":""}