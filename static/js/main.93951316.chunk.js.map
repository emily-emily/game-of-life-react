{"version":3,"sources":["Grid.js","ImageRadio.js","Settings.js","structures/structures.js","structures/StructureMenu.js","App.js","index.js"],"names":["Grid","props","handleMouseEnter","id","setState","shadowLocation","state","gridTable","this","grid","gridCopy","map","arr","slice","shadowGrid","cellId","split","x","parseInt","y","i","length","j","row","r","key","val","c","interactive","cellSize","boxId","value","cellColor","cellClickFunc","onMouseEnter","className","React","Component","Cell","cellStyle","backgroundColor","height","width","style","onClick","ImageRadio","handleClick","onChange","content","label","classes","large","medium","small","imgSrc","src","alt","altText","solidColor","type","checked","name","Settings","handleIntervalSliderChange","newSettings","settings","interval","updateSettingsFunc","handleColorChange","color","colorOptions","hex","Modal","closeIcon","onClose","closeFunc","open","Header","Content","discrete","start","min","max","step","structures","StructureMenu","selectItem","selected","detailsOpen","selectedGrid","data","generation","console","log","nextGen","stepFunc","period","removePadding","shift","pop","forEach","componentDidMount","s","unshift","push","emptyRow","Array","fill","structure","selectItemFunc","dimensions","Button","icon","labelPosition","placeStructFunc","Icon","Math","Popup","disabled","trigger","StructureItem","toggleHover","hover","play","timer","setInterval","onMouseLeave","App","toggleAutoPlay","playing","clearInterval","openSettingsModal","settingsModalOpen","closeSettingsModal","openStructureMenu","structureMenuOpen","closeStructureMenu","openHelpModal","helpModalOpen","closeHelpModal","updateSettings","newGrid","neighours","nLiveNeighbours","cellIsPopulated","g","count","startPlaceStructure","selectedStructGrid","resetGrid","rows","cols","randomSeedGrid","floor","random","onCellClick","confirmPlaceStructure","toggleCell","handleKeyup","ev","keyCode","structureFlip","shiftKey","structureRotate","dir","reverse","currGrid","col","handleResize","resizeGrid","deviceW","window","innerWidth","helpEnabled","deviceH","innerHeight","newW","newH","document","addEventListener","componentWillUnmount","removeEventListener","onMouseMove","updateCursorXY","primary","HelpModal","Table","celled","Row","HeaderCell","Body","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.93951316.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Grid.css';\r\n    \r\n/* Grid displays a grid.\r\n * \r\n * Props: * interactive (bool): determines whether cells can be toggled\r\n *        * grid (matrix): grid data\r\n *        * cellClickFunc(cellId): function on cell click\r\n *        * cellColor: hex cell color\r\n *        * cellSize: cell size in pixels\r\n *        * shadowGrid: grid of structure being placed\r\n*/\r\nclass Grid extends React.Component {\r\n  constructor(props){\r\n    super(props);\r\n    this.state = {\r\n      // shadow cell on mouse hover\r\n      shadowLocation: '0_0'\r\n    };\r\n  }\r\n  \r\n  // set shadow to cell\r\n  handleMouseEnter = (id) => {\r\n    this.setState({ shadowLocation: id });\r\n  }\r\n\r\n  render() {\r\n    // grid to be displayed\r\n    let gridTable = null;\r\n    \r\n    // create grid\r\n    if (this.props.grid){\r\n      let gridCopy = this.props.grid.map(function(arr) { return arr.slice(); });\r\n\r\n      // add shadow of the grid that is being placed\r\n      if (this.props.shadowGrid){\r\n        let cellId = (this.state.shadowLocation.slice()).split('_');\r\n        let x = parseInt(cellId[0]);\r\n        let y = parseInt(cellId[1]);\r\n  \r\n        for (let i = 0; i < this.props.shadowGrid.length; i++){\r\n          for (let j = 0; j < this.props.shadowGrid[0].length; j++){\r\n\r\n            // only structure within the grid is shadowed\r\n            if (x + i < this.props.grid.length && y + j < this.props.grid[0].length){\r\n\r\n              // add shadow where structure is live\r\n              if (this.props.shadowGrid[i][j])\r\n                gridCopy[x + i][y + j] = 2;\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      // add cells to table\r\n      gridTable = gridCopy.map((row, r) => {\r\n        return <tr key={r}>\r\n          {\r\n            row.map((val, c) => {\r\n              return <Cell\r\n                interactive={this.props.interactive}\r\n                cellSize={this.props.cellSize}\r\n                boxId={r + '_' + c}\r\n                key={r + '_' + c}\r\n                value={val}\r\n                cellColor={this.props.cellColor}\r\n                cellClickFunc={this.props.cellClickFunc}\r\n                onMouseEnter={this.handleMouseEnter}\r\n              />;\r\n            })\r\n          }\r\n        </tr>\r\n      })\r\n    }\r\n\r\n    return (\r\n      <table className='grid'>\r\n        <tbody>\r\n          { gridTable }\r\n        </tbody>\r\n      </table>\r\n    );\r\n  }\r\n}\r\n\r\n/* Cell displays a cell.\r\n * \r\n * Props: * interactive (bool): determines whether the cell can be toggled\r\n *        * cellSize: cell size in pixels\r\n *        * boxId: id of the box. Format: r_c\r\n *        * value: value of the cell (0 (empty), 1 (live) or 2 (shadow))\r\n *        * cellColor: hex cell color\r\n *        * cellClickFunc: function to call when a cell is clicked\r\n *        * onMouseEnter: function for mouse hover\r\n*/\r\nclass Cell extends React.Component {\r\n\r\n  render() {\r\n    let cellStyle = {\r\n      backgroundColor: null,\r\n      height: this.props.cellSize ? this.props.cellSize + 'px' : '20px',\r\n      width: this.props.cellSize ? this.props.cellSize + 'px' : '20px'\r\n    }\r\n\r\n    if (this.props.value === 1 || this.props.value === true)\r\n      cellStyle.backgroundColor = this.props.cellColor;\r\n    else if (this.props.value === 2)\r\n      cellStyle.backgroundColor = '#ababab';\r\n\r\n    return (\r\n      <td\r\n        style={cellStyle}\r\n        className={this.props.interactive ? 'interactive cell' : 'cell'}\r\n        onClick={this.props.interactive ? () => {this.props.cellClickFunc(this.props.boxId)} : null}\r\n        onMouseEnter={this.props.interactive ? () => this.props.onMouseEnter(this.props.boxId) : null}\r\n      />\r\n    );\r\n  }\r\n}\r\n\r\nexport default Grid;","import React from 'react';\r\nimport './ImageRadio.css';\r\n\r\n/* ImageRadio displays a custom radio with an image.\r\n * \r\n * Props: * small/medium/large: image size\r\n *        * name: radio name\r\n *        * solidColor: fills image with a solid color\r\n *        * value: radio value\r\n *        * label: radio label\r\n *        * onClick: handle radio click\r\n *        * checked: checked\r\n * \r\n * Notes: * checked should be store in the parent class' state.\r\n*/\r\nclass ImageRadio extends React.Component {\r\n  \r\n  handleClick = () => {\r\n    if (this.props.onChange) this.props.onChange(this.props.value);\r\n    else if (this.props.onClick) this.props.onClick(this.props.value);\r\n  }\r\n\r\n  render() {\r\n    // set radio classes\r\n    let classes = 'imageRadio';\r\n    if (this.props.large) classes += ' large';\r\n    else if (this.props.medium) classes += ' medium';\r\n    else if (this.props.small) classes += ' small';\r\n\r\n    let content;\r\n    if (this.props.imgSrc) content = <img className='imageRadioContent' src={this.props.imgSrc} alt={this.props.altText} />\r\n    else if (this.props.solidColor) content = <div className='imageRadioContent' style={{backgroundColor: this.props.solidColor}} />\r\n\r\n    let label;\r\n    if (this.props.label) label=<p className='imageRadioLabel'>{this.props.label}</p>\r\n    return(\r\n      <div className='imageRadioWrapper'>\r\n        <input\r\n          type='radio'\r\n          checked={this.props.checked}\r\n          name={this.props.name}\r\n          value={this.props.value}\r\n          onClick={this.handleClick}\r\n        />\r\n        <div className={classes}>\r\n          {content}\r\n          {label}\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default ImageRadio;","import React from 'react';\r\nimport './Settings.css';\r\nimport { Modal } from 'semantic-ui-react';\r\nimport { Slider } from 'react-semantic-ui-range';\r\n\r\nimport ImageRadio from './ImageRadio';\r\n\r\n\r\n/* Settings displays the settings modal\r\n * \r\n * Props: * settings: contains settings data from App\r\n *        * open: determines whether Settings is open\r\n *        * updateSettingsFunc: function to update settings in App state\r\n *        * closeFunc: function to close Settings\r\n*/\r\nclass Settings extends React.Component {\r\n\r\n  handleIntervalSliderChange = (val) => {\r\n    let newSettings = {...this.props.settings};\r\n    newSettings.interval = val;\r\n\r\n    this.props.updateSettingsFunc(newSettings);\r\n  }\r\n\r\n  handleColorChange = (val) => {\r\n    let newSettings = {...this.props.settings};\r\n    newSettings.color = val;\r\n\r\n    this.props.updateSettingsFunc(newSettings);\r\n  }\r\n\r\n  render() {\r\n    // color options\r\n    let colors = [\r\n      { name: 'Black', hex: '#242424' },\r\n      { name: 'Red', hex: '#e60000' },\r\n      { name: 'Orange', hex: '#ebab34' },\r\n      { name: 'Yellow', hex: '#f0e446' },\r\n      { name: 'Green', hex: '#1dc223' },\r\n      { name: 'Blue', hex: '#1555c2' },\r\n      { name: 'Purple', hex: '#9715c2' },\r\n      { name: 'Pink', hex: '#f760e3' }\r\n    ];\r\n\r\n    let colorOptions = colors.map((c, i) => {\r\n      return <ImageRadio\r\n        small\r\n        name='color'\r\n        solidColor={c.hex}\r\n        value={c.hex}\r\n        label={c.name}\r\n        onClick={this.handleColorChange}\r\n        checked={c.hex === this.props.settings.color}\r\n        key={i}\r\n      />\r\n    });\r\n\r\n    return (\r\n      <Modal\r\n        closeIcon\r\n        onClose={this.props.closeFunc}\r\n        open={this.props.open}\r\n      >\r\n        <Modal.Header>Settings</Modal.Header>\r\n        <Modal.Content>\r\n          <div className='settings-item'>\r\n            <label>Play Speed</label>\r\n            <Slider\r\n              discrete \r\n              color='blue'\r\n              settings={{\r\n                start: 1000 / this.props.settings.interval,\r\n                min: 1,\r\n                max: 5,\r\n                step: 1,\r\n                onChange: value => this.handleIntervalSliderChange(1000 / value)\r\n              }}\r\n            />\r\n          </div>\r\n          <div className='settings-item'>\r\n            <label>Color</label><br />\r\n            {colorOptions}\r\n          </div>\r\n        </Modal.Content>\r\n      </Modal>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Settings;","// provides preset structures in json format\r\n// grid: 0 -> empty cell\r\n//       1 -> live cell\r\n//       2 -> shadow (used in structure placement)\r\n\r\nexport const structures = [\r\n  {\r\n    \"name\": \"Blinker\",\r\n    \"dimensions\": [3, 3],\r\n    \"type\": \"oscillator\",\r\n    \"period\": 2,\r\n    \"grid\": [\r\n      [0, 0, 0],\r\n      [1, 1, 1],\r\n      [0, 0, 0]\r\n    ]\r\n  },\r\n  {\r\n    \"name\": \"Toad\",\r\n    \"dimensions\": [4, 4],\r\n    \"type\": \"oscillator\",\r\n    \"period\": 2,\r\n    \"grid\": [\r\n      [0, 0, 0, 0],\r\n      [0, 1, 1, 1],\r\n      [1, 1, 1, 0],\r\n      [0, 0, 0, 0]\r\n    ]\r\n  },\r\n  {\r\n    \"name\": \"Beacon\",\r\n    \"dimensions\": [4, 4],\r\n    \"type\": \"oscillator\",\r\n    \"period\": 2,\r\n    \"grid\": [\r\n      [1, 1, 0, 0],\r\n      [1, 1, 0, 0],\r\n      [0, 0, 1, 1],\r\n      [0, 0, 1, 1]\r\n    ]\r\n  },\r\n  {\r\n    \"name\": \"Pulsar\",\r\n    \"dimensions\": [15, 15],\r\n    \"type\": \"oscillator\",\r\n    \"period\": 3,\r\n    \"grid\": [\r\n      [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0],\r\n      [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0],\r\n      [0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0],\r\n      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n      [1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1],\r\n      [0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0],\r\n      [0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0],\r\n      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n      [0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0],\r\n      [0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0],\r\n      [1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1],\r\n      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n      [0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0],\r\n      [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0],\r\n      [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0]\r\n    ]\r\n  },\r\n  {\r\n    \"name\": \"Pentadecathlon\",\r\n    \"dimensions\": [9, 16],\r\n    \"type\": \"oscillator\",\r\n    \"period\": 15,\r\n    \"grid\": [\r\n      [0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n      [0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n      [0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n      [0, 0, 0, 0, 1, 0, 0, 0, 0],\r\n      [0, 0, 0, 1, 0, 1, 0, 0, 0],\r\n      [0, 0, 1, 0, 0, 0, 1, 0, 0],\r\n      [0, 0, 1, 0, 0, 0, 1, 0, 0],\r\n      [0, 0, 1, 0, 0, 0, 1, 0, 0],\r\n      [0, 0, 1, 0, 0, 0, 1, 0, 0],\r\n      [0, 0, 1, 0, 0, 0, 1, 0, 0],\r\n      [0, 0, 1, 0, 0, 0, 1, 0, 0],\r\n      [0, 0, 0, 1, 0, 1, 0, 0, 0],\r\n      [0, 0, 0, 0, 1, 0, 0, 0, 0],\r\n      [0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n      [0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n      [0, 0, 0, 0, 0, 0, 0, 0, 0]\r\n    ]\r\n  },\r\n  {\r\n    \"name\": \"Glider\",\r\n    \"dimensions\": [3, 3],\r\n    \"type\": \"spaceship\",\r\n    \"grid\": [\r\n      [0, 0, 1],\r\n      [1, 0, 1],\r\n      [0, 1, 1]\r\n    ]\r\n  },\r\n  {\r\n    \"name\": \"Medium Spaceship\",\r\n    \"dimensions\": [5, 4],\r\n    \"type\": \"spaceship\",\r\n    \"grid\": [\r\n      [1, 0, 0, 1, 0],\r\n      [0, 0, 0, 0, 1],\r\n      [1, 0, 0, 0, 1],\r\n      [0, 1, 1, 1, 1]\r\n    ]\r\n  },\r\n  {\r\n    \"name\": \"Gosper Glider Gun\",\r\n    \"dimensions\": [36, 9],\r\n    \"type\": \"gun\",\r\n    \"period\": 30,\r\n    \"grid\": [\r\n      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1],\r\n      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1],\r\n      [1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n      [1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\r\n    ]\r\n  },\r\n  {\r\n    \"name\": \"Diamond Ring\",\r\n    \"dimensions\": [13, 13],\r\n    \"type\": \"oscillator\",\r\n    \"period\": 3,\r\n    \"grid\": [\r\n      [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0],\r\n      [0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0],\r\n      [0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0],\r\n      [0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0],\r\n      [0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0],\r\n      [0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0],\r\n      [1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1],\r\n      [0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0],\r\n      [0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0],\r\n      [0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0],\r\n      [0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0],\r\n      [0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0],\r\n      [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0]\r\n    ]\r\n  },\r\n  {\r\n    \"name\": \"Glasses\",\r\n    \"dimensions\": [18, 11],\r\n    \"type\": \"oscillator\",\r\n    \"period\": 2,\r\n    \"grid\": [\r\n      [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0],\r\n      [0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0],\r\n      [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0],\r\n      [0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0],\r\n      [1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1],\r\n      [0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0],\r\n      [0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0],\r\n      [0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0],\r\n      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n      [0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0],\r\n      [0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0]\r\n    ]\r\n  },\r\n  {\r\n    \"name\": \"Turtle\",\r\n    \"dimensions\": [12, 10],\r\n    \"type\": \"spaceship\",\r\n    \"period\": 3,\r\n    \"grid\": [\r\n      [0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1],\r\n      [0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1],\r\n      [0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0],\r\n      [0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0],\r\n      [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0],\r\n      [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0],\r\n      [0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0],\r\n      [0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0],\r\n      [0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1],\r\n      [0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1]\r\n    ]\r\n  },\r\n  {\r\n    \"name\": \"Canada Goose\",\r\n    \"dimensions\": [13, 12],\r\n    \"type\": \"spaceship\",\r\n    \"period\": 4,\r\n    \"grid\": [\r\n      [1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n      [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0],\r\n      [0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1],\r\n      [0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0],\r\n      [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0],\r\n      [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0],\r\n      [0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0],\r\n      [0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0],\r\n      [0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0],\r\n      [0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0],\r\n      [0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n      [0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0]\r\n    ]\r\n  }\r\n]","import React from 'react';\r\nimport { Modal, Button, Popup, Icon } from 'semantic-ui-react';\r\nimport './StructureMenu.css';\r\n\r\nimport { structures as data } from './structures';\r\nimport Grid from './../Grid';\r\n\r\n/* StructureMenu displays the structure menu.\r\n * \r\n * Props: * open: whether the menu is visible\r\n *        * stepFunc: function to step a grid forward\r\n *        * closeFunc: function to close the menu\r\n *        * placeStructFunc: function to start placing a structure\r\n*/\r\nclass StructureMenu extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      selected: 0, // id of selected structure\r\n      detailsOpen: false, // details pane open?\r\n      selectedGrid: data[0].grid, // grid data for selected structure\r\n      generation: 0 // generation of the structure in the details pane\r\n    }\r\n  }\r\n\r\n  // selects a new item to view in the details pane\r\n  selectItem = (i) => {\r\n    this.setState({\r\n      selected: i,\r\n      detailsOpen: true,\r\n      selectedGrid: data[i].grid,\r\n      generation: 0\r\n    });\r\n    console.log(data[i].grid);\r\n  }\r\n\r\n  // steps a grid forward\r\n  nextGen = () => {\r\n    this.setState({\r\n      selectedGrid: this.props.stepFunc(this.state.selectedGrid),\r\n      generation: (this.state.generation + 1) % data[this.state.selected].period\r\n    });\r\n  }\r\n\r\n  // returns the grid without the padding around the structure\r\n  removePadding = (grid) => {\r\n    let gridCopy = grid.map(function(arr) { return arr.slice(); });\r\n\r\n    // remove empty first and last rows\r\n    gridCopy.shift();\r\n    gridCopy.pop();\r\n\r\n    // remove empty units at the beginning and end of each row\r\n    gridCopy.forEach(row => {\r\n      row.shift();\r\n      row.pop();\r\n    });\r\n\r\n    return gridCopy;\r\n  }\r\n\r\n  componentDidMount = () => {\r\n\r\n    // provide one unit of padding around the structure\r\n    data.forEach(s => {\r\n      // add one empty unit at the beginning and end of each row\r\n      s.grid.forEach(row => {\r\n        row.unshift(false);\r\n        row.push(false);\r\n      });\r\n    \r\n      // add empty first and last rows\r\n      let emptyRow = new Array(s.grid[0].length).fill(false);\r\n      s.grid.unshift(emptyRow);\r\n      s.grid.push(emptyRow);\r\n    });\r\n  }\r\n\r\n  render() {\r\n    // array of structures to display\r\n    let structures = data.map((s, i) => {\r\n      return <StructureItem\r\n        key={i}\r\n        i={i}\r\n        structure={s}\r\n        stepFunc={this.props.stepFunc}\r\n        selectItemFunc={this.selectItem}\r\n      />\r\n    });\r\n\r\n    return (\r\n      <Modal\r\n        closeIcon\r\n        onClose={this.props.closeFunc}\r\n        open={this.props.open}\r\n      >\r\n        <Modal.Header>Structures</Modal.Header>\r\n        <Modal.Content>\r\n          <div id='modal-content'>\r\n            {/* main panel */}\r\n            <div id='structure-list' className={!this.state.detailsOpen ? 'visible' : null}>\r\n              {structures}\r\n            </div>\r\n\r\n            {/* detail panel */}\r\n            <div id='structure-details' className={this.state.detailsOpen ? 'visible' : null}>\r\n              <div>\r\n                <h3>{data[this.state.selected].name}</h3>\r\n                <p>Dimensions: {data[this.state.selected].dimensions[0]}x{data[this.state.selected].dimensions[1]}</p>\r\n                <p>Period: {data[this.state.selected].period}</p>\r\n                <p>Type: {data[this.state.selected].type}</p>\r\n                <Button icon\r\n                  labelPosition='left'\r\n                  onClick={() => this.props.placeStructFunc(this.removePadding(this.state.selectedGrid))}\r\n                >\r\n                  Place this structure!\r\n                  <Icon name='paint brush' />\r\n                </Button>\r\n                <Button className='back-button' onClick={() => this.setState({ detailsOpen: false })}>Back</Button>\r\n              </div>\r\n              <div id='structure-grid'>\r\n                <Grid\r\n                  grid={this.state.selectedGrid}\r\n                  cellSize={300 / Math.max(this.state.selectedGrid.length, this.state.selectedGrid[0].length)}\r\n                  cellColor={'#616161'}\r\n                />\r\n                <p>Generation {this.state.generation}</p>\r\n                <Popup\r\n                  content='Animation for spaceships is currently unavailable'\r\n                  disabled={data[this.state.selected].type !== 'spaceship'}\r\n                  trigger={\r\n                    <span><Button\r\n                      onClick={this.nextGen}\r\n                      disabled={data[this.state.selected].type === 'spaceship'}\r\n                    >Step</Button></span>\r\n                  }\r\n                />\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </Modal.Content>\r\n      </Modal>\r\n    );\r\n  }\r\n}\r\n\r\n/* StructureItem displays a single structure in the structure menu.\r\n * \r\n * Props: * i: id of structure\r\n *        * structure: structure data\r\n *        * stepFunc: function to step a grid forward\r\n *        * selectItemFunc: selects current grid to view in detail panel\r\n*/\r\nclass StructureItem extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      hover: false,\r\n      structure: this.props.structure,\r\n      grid: this.props.structure.grid,\r\n      timer: setInterval(this.play, 1000)\r\n    }\r\n  }\r\n\r\n  toggleHover = () => { this.setState({ hover: !this.state.hover }) }\r\n\r\n  // steps the grid forward one\r\n  play = () => {\r\n    if (this.state.hover && this.props.structure.type !== 'spaceship')\r\n      this.setState({ grid: this.props.stepFunc(this.state.grid) })\r\n  }\r\n\r\n  render() {\r\n    // different cell sizes for different grid sizes\r\n    let gridSize = Math.max(this.state.grid.length, this.state.grid[0].length);\r\n    let cellSize = (150 / gridSize);\r\n\r\n    return (\r\n      <div\r\n        className='structure-item'\r\n        onMouseEnter={this.toggleHover}\r\n        onMouseLeave={this.toggleHover}\r\n        onClick={() => this.props.selectItemFunc(this.props.i)}\r\n      >\r\n        <p>{this.props.structure.name}</p>\r\n        <Grid\r\n          grid={this.state.grid}\r\n          cellColor='#616161'\r\n          cellSize={cellSize}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default StructureMenu;","import React from 'react';\r\nimport './App.css';\r\nimport  { Button, Icon, Modal, Table } from 'semantic-ui-react';\r\n\r\nimport Grid from './Grid';\r\nimport Settings from './Settings';\r\nimport StructureMenu from './structures/StructureMenu';\r\n\r\nclass App extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    // initial number of rows/cols. Will be updated in componentDidMount()\r\n    let initialRows = 5;\r\n    let initialCols = 5;\r\n\r\n    this.timer = null; // timer for auto-playing\r\n    this.cellSize = 20; // cell size in px\r\n\r\n    this.state = {\r\n      // main grid\r\n      grid: (new Array(initialRows)).fill().map(() => { return new Array(initialCols).fill(0) }),\r\n      playing: false,\r\n      generation: 0,\r\n\r\n      settings: {\r\n        interval: 500, // auto-play interval in ms\r\n        color: '#242424', // default cell color\r\n      },\r\n\r\n      // grid of the structure that is being placed\r\n      selectedStructGrid: null,\r\n\r\n      // modals\r\n      settingsModalOpen: false,\r\n      structureMenuOpen: false,\r\n      helpModalOpen: false,\r\n\r\n      // shows help modal (keyboard shortcuts) for large devices only\r\n      helpEnabled: false\r\n    }\r\n  }\r\n\r\n  toggleAutoPlay = () => {\r\n    if (this.state.playing){ clearInterval(this.timer) }\r\n    else { this.timer = setInterval(this.play, this.state.settings.interval) }\r\n    this.setState({ playing: !this.state.playing });\r\n  }\r\n\r\n  openSettingsModal = () => { this.setState({ settingsModalOpen: true }) }\r\n  closeSettingsModal = () => {console.log(\"close\"); this.setState({ settingsModalOpen: false }) }\r\n\r\n  openStructureMenu = () => { this.setState({ structureMenuOpen: true }) }\r\n  closeStructureMenu = () => { this.setState({ structureMenuOpen: false }) }\r\n\r\n  openHelpModal = () => { this.setState({ helpModalOpen: true }) }\r\n  closeHelpModal = () => { this.setState({ helpModalOpen: false }) }\r\n\r\n  updateSettings = (newSettings) => {\r\n    this.setState({ settings: newSettings });\r\n  }\r\n\r\n  // steps one generation on the main grid\r\n  play = () => {\r\n    let newGrid = this.step(this.state.grid);\r\n\r\n    // update grid and increment generation counter\r\n    this.setState({\r\n      grid: newGrid,\r\n      generation: this.state.generation + 1\r\n    });\r\n  }\r\n\r\n  // returns grid of the next generation\r\n  step = (grid) => {\r\n    // work on a copy of the grid\r\n    let newGrid = grid.map(function(arr) { return arr.slice(); });\r\n    for (let r = 0; r < grid.length; r++){\r\n      for (let c = 0; c < grid[0].length; c++){\r\n        let neighours = this.nLiveNeighbours(r, c, grid);\r\n        if (this.cellIsPopulated(r, c, grid)){\r\n          // a cell dies if there are less than 2 or more than 3 neighbours\r\n          if (neighours < 2 || neighours > 3) newGrid[r][c] = 0;\r\n        }\r\n        // an empty cell becomes a live cell if there are exactly 3 neighbours\r\n        else if (neighours === 3) newGrid[r][c] = 1;\r\n      }\r\n    }\r\n\r\n    return newGrid;\r\n  }\r\n\r\n  // returns the number of living cells neighbouring the cell at row r, column c in grid g\r\n  nLiveNeighbours = (r, c, g) => {\r\n    let count = 0;\r\n    if (this.cellIsPopulated(r - 1, c - 1, g)) count++;\r\n    if (this.cellIsPopulated(r - 1, c, g)) count++;\r\n    if (this.cellIsPopulated(r - 1, c + 1, g)) count++;\r\n    if (this.cellIsPopulated(r, c - 1, g)) count++;\r\n    if (this.cellIsPopulated(r, c + 1, g)) count++;\r\n    if (this.cellIsPopulated(r + 1, c - 1, g)) count++;\r\n    if (this.cellIsPopulated(r + 1, c, g)) count++;\r\n    if (this.cellIsPopulated(r + 1, c + 1, g)) count++;\r\n    return count;\r\n  }\r\n\r\n  cellIsPopulated = (r, c, grid) => { return (r >= 0 && c >= 0 && r < grid.length && c < grid[0].length && grid[r][c]) }\r\n\r\n  // close structure menu and select structure to place\r\n  startPlaceStructure = (grid) => {\r\n    this.setState({\r\n      structureMenuOpen: false,\r\n      selectedStructGrid: grid\r\n    });\r\n  }\r\n\r\n  // clears the main grid\r\n  resetGrid = () => {\r\n    let rows = this.state.grid.length;\r\n    let cols = this.state.grid[0].length;\r\n    let grid = (new Array(rows)).fill().map(() => { return new Array(cols).fill(0) });\r\n    \r\n    this.setState({\r\n      grid: grid,\r\n      generation: 0\r\n    });\r\n  }\r\n\r\n  // fills each cell in the main grid with a random on/off state\r\n  randomSeedGrid = () => {\r\n    let rows = this.state.grid.length;\r\n    let cols = this.state.grid[0].length;\r\n    let grid = (new Array(rows)).fill().map(() => { return new Array(cols).fill(0) });\r\n\r\n    for (let i = 0; i < rows; i++)\r\n      for (let j = 0; j < cols; j++)\r\n        if (Math.floor(Math.random() * 5) === 1)\r\n          grid[i][j] = 1;\r\n    \r\n    this.setState({\r\n      grid: grid,\r\n      generation: 0\r\n    });\r\n  }\r\n  \r\n  // determines what happens when a cell is clicked\r\n  onCellClick = (id) => {\r\n    if (this.state.selectedStructGrid)\r\n      this.confirmPlaceStructure(id);\r\n    else\r\n      this.toggleCell(id);\r\n  }\r\n\r\n  // places the structure on the grid\r\n  confirmPlaceStructure = (id) => {\r\n    id = id.split('_');\r\n    let x = parseInt(id[0]);\r\n    let y = parseInt(id[1]);\r\n    let gridCopy = this.state.grid.map(function(arr) { return arr.slice(); });\r\n\r\n    for (let i = 0; i < this.state.selectedStructGrid.length; i++){\r\n      for (let j = 0; j < this.state.selectedStructGrid[0].length; j++){\r\n\r\n        // only structure within the grid is placed\r\n        if (x + i < gridCopy.length && y + j < gridCopy[0].length){\r\n          \r\n          // edit grid only if structure has a live cell at that position\r\n          if (this.state.selectedStructGrid[i][j])\r\n            gridCopy[x + i][y + j] = this.state.selectedStructGrid[i][j];\r\n        }\r\n      }\r\n    }\r\n\r\n    this.setState({\r\n      grid: gridCopy,\r\n      selectedStructGrid: null\r\n    });\r\n  }\r\n\r\n  // turns a cell on or off based on its current status\r\n  toggleCell = (id) => {\r\n    if (!this.state.playing){\r\n      id = id.split('_');\r\n      let r = id[0];\r\n      let c = id[1];\r\n  \r\n      let grid = this.state.grid.slice();\r\n  \r\n      grid[r][c] = !grid[r][c];\r\n  \r\n      this.setState({ grid: grid });\r\n    }\r\n  }\r\n\r\n  handleKeyup = (ev) => {\r\n    if (this.state.selectedStructGrid){\r\n      // escape: cancels structure placement\r\n      if (ev.keyCode === 27){\r\n        if (this.state.selectedStructGrid !== null)\r\n          this.setState({ selectedStructGrid: null });\r\n      }\r\n  \r\n      // f: flips structure\r\n      if (ev.keyCode === 70){\r\n        // f: horizontal flip\r\n        // shift-f: vertical flip\r\n        this.structureFlip(ev.shiftKey ? 1 : 0);\r\n      }\r\n\r\n      // a / left-arrow: rotates structure counter-clockwise\r\n      if (ev.keyCode === 65 || ev.keyCode === 37){\r\n        this.structureRotate(-1);\r\n      }\r\n\r\n      // d / right-arrow: rotates structure clockwise\r\n      if (ev.keyCode === 68 || ev.keyCode === 39){\r\n        this.structureRotate(1);\r\n      }\r\n    }\r\n  }\r\n\r\n  // flips the selected structure\r\n  // notes: dir = 0 flips horizontally\r\n  //        dir = 1 flips vertically\r\n  structureFlip = (dir) => {\r\n    let gridCopy = this.state.selectedStructGrid.map(function(arr) { return arr.slice(); });\r\n\r\n    // horizontal flip\r\n    if (dir === 0){\r\n      gridCopy.forEach(row => row.reverse());\r\n    }\r\n    // vertical flip\r\n    else if (dir === 1){\r\n      gridCopy.reverse();\r\n    }\r\n\r\n    this.setState({ selectedStructGrid: gridCopy });\r\n  }\r\n\r\n  // rotates the selected structure\r\n  // notes: if dir < 0 then structure will rotate counter-clockwise\r\n  //        if dir > 0 then structure will rotate clockwise\r\n  structureRotate = (dir) => {\r\n    let currGrid = this.state.selectedStructGrid;\r\n    // newGrid is currGrid reflected across the diagonal from the top left to the bottom right\r\n    //   the ith column in currGrid is the ith row in newGrid.\r\n    let newGrid = currGrid[0].map((col, i) => currGrid.map(row => row[i]));\r\n\r\n    // flip vertically for counter-clockwise rotation\r\n    if (dir < 0)\r\n      newGrid.reverse();\r\n    // flip horizontally for clockwise rotation\r\n    else if (dir > 0)\r\n      newGrid.forEach(row => row.reverse());\r\n\r\n    // update grid\r\n    this.setState({ selectedStructGrid: newGrid });\r\n  }\r\n  \r\n  handleResize = (ev) => {\r\n    this.resizeGrid();\r\n\r\n    let deviceW = window.innerWidth;\r\n    if (deviceW < 700 && this.state.helpEnabled){\r\n      this.setState({\r\n        helpModalOpen: false,\r\n        helpEnabled: false\r\n      });\r\n    }\r\n    else if (deviceW >= 700 && !this.state.helpEnabled){\r\n      this.setState({ helpEnabled: true });\r\n    }\r\n  }\r\n\r\n  // resizes the grid to match the device\r\n  resizeGrid = () => {\r\n    let deviceW = window.innerWidth;\r\n    let deviceH = window.innerHeight;\r\n\r\n    // new width and height of grid in cells\r\n    let newW = parseInt((deviceW * 0.8) / this.cellSize);\r\n    let newH = parseInt((deviceH - 200) / this.cellSize);\r\n\r\n    // width and height must be at least 5\r\n    if (newW < 5) newW = 5;\r\n    if (newH < 5) newH = 5;\r\n\r\n    // cap width and height at 64 and 32\r\n    if (newW > 64) newW = 64;\r\n    if (newH > 32) newH = 32;\r\n    \r\n    let gridCopy = this.state.grid.map(function(arr) { return arr.slice(); });\r\n\r\n    // pop rows until the new height is satisfied\r\n    if (newH < gridCopy.length){\r\n      while (gridCopy.length > newH)\r\n        gridCopy.pop();\r\n    }\r\n    // append empty rows until the new width is satisfied\r\n    else if (newH > gridCopy.length) {\r\n      while (gridCopy.length < newH){\r\n        let emptyRow = new Array(gridCopy[0].length).fill(0);\r\n        gridCopy.push(emptyRow);\r\n      }\r\n    }\r\n\r\n    // pop elements from each row until the new width is satisfied\r\n    if (newW < gridCopy[0].length){\r\n      gridCopy.forEach(row => {\r\n        while (row.length > newW)\r\n          row.pop();\r\n      });\r\n    }\r\n    // append 0s to each row until the new width is satisfied\r\n    else if (newW > gridCopy[0].length){\r\n      gridCopy.forEach(row => {\r\n        while (row.length < newW)\r\n          row.push(0);\r\n      });\r\n    }\r\n\r\n    this.setState({ grid: gridCopy });\r\n  }\r\n\r\n  componentDidMount = () => {\r\n    document.addEventListener('keyup', this.handleKeyup, false);\r\n    window.addEventListener('resize', this.handleResize, false);\r\n\r\n    // resize grid to fit device\r\n    this.resizeGrid();\r\n  }\r\n\r\n  componentWillUnmount = () => {\r\n    document.removeEventListener('keyup', this.handleKeyup, false);\r\n    window.removeEventListener('resize', this.handleResize, false);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className='app' onMouseMove={this.updateCursorXY}>\r\n        <div className='title'>Game of Life</div>\r\n        <Grid\r\n          // grid is interactive unless autoplaying\r\n          interactive={ !this.state.playing}\r\n          grid={this.state.grid}\r\n          cellClickFunc={this.onCellClick}\r\n          cellColor={this.state.settings.color}\r\n          cellSize={this.cellSize}\r\n          shadowGrid={this.state.selectedStructGrid}\r\n        />\r\n        <p>Generation: {this.state.generation}</p>\r\n\r\n        {/* bottom action bar */}\r\n        <div className='button-container'>\r\n          <Button\r\n            primary icon\r\n            onClick={this.toggleAutoPlay}\r\n            disabled={this.state.selectedStructGrid !== null}\r\n          >\r\n            <Icon name={this.state.playing ? 'pause' : 'play'} />\r\n          </Button>\r\n          <Button onClick={this.play} disabled={this.state.playing || this.state.selectedStructGrid !== null}>Step</Button>\r\n          <Button icon onClick={this.openStructureMenu} disabled={this.state.playing || this.state.selectedStructGrid !== null}>\r\n            <Icon name='folder outline' />\r\n          </Button>\r\n          <Button onClick={this.resetGrid} disabled={this.state.playing || this.state.selectedStructGrid !== null}>Reset Grid</Button>\r\n          <Button onClick={this.randomSeedGrid} disabled={this.state.playing || this.state.selectedStructGrid !== null}>Seed</Button>\r\n          <Button icon onClick={this.openSettingsModal} disabled={this.state.playing || this.state.selectedStructGrid !== null}>\r\n            <Icon name='setting' />\r\n          </Button>\r\n          {\r\n            this.state.helpEnabled\r\n            ? <Button icon onClick={this.openHelpModal} disabled={this.state.playing || this.state.selectedStructGrid !== null}>\r\n                <Icon name='question' />\r\n              </Button>\r\n            : null\r\n          }\r\n          \r\n        </div>\r\n\r\n        {/* settings modal */}\r\n        <Settings\r\n          settings={this.state.settings}\r\n          open={this.state.settingsModalOpen}\r\n          updateSettingsFunc={this.updateSettings}\r\n          closeFunc={this.closeSettingsModal}\r\n        />\r\n\r\n        {/* structure menu */}\r\n        <StructureMenu\r\n          open={this.state.structureMenuOpen}\r\n          stepFunc={this.step}\r\n          closeFunc={this.closeStructureMenu}\r\n          placeStructFunc={this.startPlaceStructure}\r\n        />\r\n\r\n        {/* help modal */}\r\n        <HelpModal\r\n          open={this.state.helpModalOpen}\r\n          closeFunc={this.closeHelpModal}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nclass HelpModal extends React.Component {\r\n  render(){\r\n    return (\r\n      <Modal\r\n        closeIcon\r\n        onClose={this.props.closeFunc}\r\n        open={this.props.open}\r\n      >\r\n        <Modal.Header>Help</Modal.Header>\r\n        <Modal.Content>\r\n          <div id='help-content'>\r\n            <Table celled>\r\n              <Table.Header>\r\n                <Table.Row>\r\n                  <Table.HeaderCell>Key</Table.HeaderCell>\r\n                  <Table.HeaderCell>Action</Table.HeaderCell>\r\n                </Table.Row>\r\n              </Table.Header>\r\n\r\n              <Table.Body>\r\n                <Table.Row>\r\n                  <Table.Cell>esc</Table.Cell>\r\n                  <Table.Cell>Cancel structure placement</Table.Cell>\r\n                </Table.Row>\r\n                <Table.Row>\r\n                  <Table.Cell>f</Table.Cell>\r\n                  <Table.Cell>Flip structure horizontally</Table.Cell>\r\n                </Table.Row>\r\n                <Table.Row>\r\n                  <Table.Cell>shift f</Table.Cell>\r\n                  <Table.Cell>Flip structure vertically</Table.Cell>\r\n                </Table.Row>\r\n                <Table.Row>\r\n                  <Table.Cell>a / left-arrow</Table.Cell>\r\n                  <Table.Cell>Rotate structure counter-clockwise</Table.Cell>\r\n                </Table.Row>\r\n                <Table.Row>\r\n                  <Table.Cell>d / right-arrow</Table.Cell>\r\n                  <Table.Cell>Rotate structure clockwise</Table.Cell>\r\n                </Table.Row>\r\n              </Table.Body>\r\n            </Table>\r\n          </div>\r\n        </Modal.Content>\r\n      </Modal>\r\n    )\r\n  }\r\n}\r\n\r\nexport default App;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport 'semantic-ui-css/semantic.min.css';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);"],"sourceRoot":""}